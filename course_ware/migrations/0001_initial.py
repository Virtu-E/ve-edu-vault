# Generated by Django 5.1.3 on 2025-04-11 08:03

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="AcademicClass",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        choices=[
                            ("Form 1", "Form 1"),
                            ("Form 2", "Form 2"),
                            ("Form 3", "Form 3"),
                            ("Form 4", "Form 4"),
                        ],
                        max_length=255,
                        unique=True,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CoreElement",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, unique=True)),
                ("tags", models.JSONField(default=dict)),
                ("description", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                ("order", models.PositiveIntegerField(default=0)),
            ],
            options={
                "verbose_name": "Core Element",
                "verbose_name_plural": "Core Elements",
                "ordering": ["order", "name"],
            },
        ),
        migrations.CreateModel(
            name="Course",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("course_key", models.CharField(max_length=255, unique=True)),
                ("course_outline", models.JSONField()),
            ],
        ),
        migrations.CreateModel(
            name="EdxUser",
            fields=[
                (
                    "id",
                    models.PositiveIntegerField(
                        help_text="edX user ID",
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        blank=True,
                        help_text="edX username",
                        max_length=255,
                        null=True,
                        unique=True,
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, help_text="edX email", max_length=254, null=True
                    ),
                ),
                ("active", models.BooleanField(default=True)),
            ],
            options={
                "verbose_name": "edX User",
                "verbose_name_plural": "edX Users",
            },
        ),
        migrations.CreateModel(
            name="ExaminationLevel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        choices=[("MSCE", "MSCE"), ("JCE", "JCE"), ("IGSCE", "IGSCE")],
                        max_length=255,
                        unique=True,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SubTopic",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                (
                    "flash_card_description",
                    models.TextField(blank=True, default="FlashCard Description"),
                ),
                ("block_id", models.TextField(db_index=True, unique=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Subtopic",
                "verbose_name_plural": "Subtopics",
            },
        ),
        migrations.CreateModel(
            name="DefaultQuestionSet",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "question_list_ids",
                    models.JSONField(help_text="References to MongoDB question IDs."),
                ),
                (
                    "sub_topic",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="course_ware.subtopic",
                    ),
                ),
            ],
            options={
                "verbose_name": "Default Question Set",
                "verbose_name_plural": "Default Question Sets",
            },
        ),
        migrations.CreateModel(
            name="SubTopicIframeID",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "identifier",
                    models.CharField(db_index=True, max_length=255, unique=True),
                ),
                (
                    "sub_topic",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="iframe_id",
                        to="course_ware.subtopic",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Topic",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("block_id", models.TextField(db_index=True, unique=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "academic_class",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="course_ware.academicclass",
                    ),
                ),
                (
                    "core_element",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="core_element",
                        to="course_ware.coreelement",
                    ),
                ),
                (
                    "course",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="category",
                        to="course_ware.course",
                    ),
                ),
                (
                    "examination_level",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="course_ware.examinationlevel",
                    ),
                ),
            ],
            options={
                "verbose_name": "Topic",
                "verbose_name_plural": "Topics",
            },
        ),
        migrations.AddField(
            model_name="subtopic",
            name="topic",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="topics",
                to="course_ware.topic",
            ),
        ),
        migrations.CreateModel(
            name="UserQuestionAttempts",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "question_metadata",
                    models.JSONField(
                        default={"v1.0.0": dict},
                        help_text="Metadata for questions attempted by the user.",
                    ),
                ),
                (
                    "current_learning_mode",
                    models.CharField(
                        choices=[
                            ("Normal", "normal"),
                            ("Reinforcement", "reinforcement"),
                            ("Recovery", "recovery"),
                            ("Reset", "reset"),
                            ("Mastered", "mastered"),
                        ],
                        default="normal",
                        max_length=255,
                    ),
                ),
                (
                    "question_metadata_description",
                    models.JSONField(
                        default={
                            "v1.0.0": {
                                "guidance": "Complete the practice set to assess your knowledge level",
                                "learning_mode": "normal",
                                "mode_guidance": "Answer and complete 2 out of 3 questions for each difficulty level (easy, medium, and hard) to finish the section.",
                                "status": "Not Started",
                            }
                        },
                        help_text="Stores status information and guidance for questions",
                    ),
                ),
                (
                    "sub_topic",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sub_topic_attempts",
                        to="course_ware.subtopic",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="question_attempts",
                        to="course_ware.edxuser",
                    ),
                ),
            ],
            options={
                "verbose_name": "User Question Attempt",
                "verbose_name_plural": "User Questions Attempts",
            },
        ),
        migrations.CreateModel(
            name="UserQuestionSet",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "question_list_ids",
                    models.JSONField(help_text="References to MongoDB question IDs."),
                ),
                ("grading_mode", models.BooleanField(default=False)),
                (
                    "sub_topic",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="course_ware.subtopic",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="question_sets",
                        to="course_ware.edxuser",
                    ),
                ),
            ],
            options={
                "verbose_name": "User Question Set",
                "verbose_name_plural": "User Question Sets",
            },
        ),
    ]
