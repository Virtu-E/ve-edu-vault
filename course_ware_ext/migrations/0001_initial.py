# Generated by Django 5.1.3 on 2025-01-20 11:27

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        (
            "course_ware",
            "0002_rename_question_set_ids_userquestionset_question_list_ids",
        ),
    ]

    operations = [
        migrations.CreateModel(
            name="CategoryExt",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "detailed_description",
                    models.TextField(help_text="Comprehensive description of the category and its importance"),
                ),
                (
                    "base_mastery_points",
                    models.PositiveIntegerField(
                        default=100,
                        help_text="Base points awarded for completing this category",
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                (
                    "bonus_points_available",
                    models.PositiveIntegerField(
                        default=20,
                        help_text="Additional bonus points available for exceptional performance",
                    ),
                ),
                (
                    "estimated_hours",
                    models.PositiveIntegerField(default=10, help_text="Estimated hours to achieve mastery"),
                ),
                (
                    "teacher_guide",
                    models.TextField(
                        blank=True,
                        help_text="Guidance for teachers on category instruction",
                        null=True,
                    ),
                ),
                (
                    "minimum_mastery_percentage",
                    models.PositiveIntegerField(
                        default=80,
                        help_text="Minimum percentage required for category mastery",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "category",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="extension",
                        to="course_ware.category",
                    ),
                ),
            ],
            options={
                "verbose_name": "Category Extension",
                "verbose_name_plural": "Category Extensions",
            },
        ),
        migrations.CreateModel(
            name="TopicExt",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "description",
                    models.CharField(help_text="Description of the topic", max_length=255),
                ),
                (
                    "estimated_duration",
                    models.PositiveIntegerField(
                        blank=True,
                        default=30,
                        help_text="Estimated time to complete the topic in minutes",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(5),
                            django.core.validators.MaxValueValidator(300),
                        ],
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional configurable metadata for the topic",
                        null=True,
                    ),
                ),
                (
                    "teacher_notes",
                    models.TextField(
                        blank=True,
                        help_text="Notes and guidance for teachers",
                        null=True,
                    ),
                ),
                (
                    "assessment_criteria",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Criteria for assessing topic mastery",
                        null=True,
                    ),
                ),
                (
                    "topic",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="extension",
                        to="course_ware.topic",
                    ),
                ),
            ],
            options={
                "verbose_name": "Topic Extension",
                "verbose_name_plural": "Topic Extensions",
            },
        ),
        migrations.CreateModel(
            name="BookResource",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(help_text="Title of the resource", max_length=255),
                ),
                (
                    "description",
                    models.TextField(blank=True, help_text="Description of the resource"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "is_featured",
                    models.BooleanField(
                        default=False,
                        help_text="Featured resources appear prominently in the UI",
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional metadata specific to the resource",
                        null=True,
                    ),
                ),
                ("author", models.CharField(max_length=255)),
                (
                    "isbn",
                    models.CharField(
                        blank=True,
                        help_text="International Standard Book Number",
                        max_length=13,
                    ),
                ),
                (
                    "publication_year",
                    models.PositiveIntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1900),
                            django.core.validators.MaxValueValidator(2100),
                        ]
                    ),
                ),
                ("publisher", models.CharField(blank=True, max_length=255)),
                ("edition", models.CharField(blank=True, max_length=50)),
                (
                    "pages",
                    models.PositiveIntegerField(
                        help_text="Number of pages in the book",
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                (
                    "format",
                    models.CharField(
                        choices=[
                            ("physical", "Physical Book"),
                            ("ebook", "E-Book"),
                            ("pdf", "PDF"),
                            ("both", "Physical & Digital"),
                        ],
                        default="physical",
                        max_length=20,
                    ),
                ),
                (
                    "topic_ext",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s",
                        to="course_ware_ext.topicext",
                    ),
                ),
            ],
            options={
                "verbose_name": "Book Resource",
                "verbose_name_plural": "Book Resources",
            },
        ),
        migrations.CreateModel(
            name="ArticleResource",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(help_text="Title of the resource", max_length=255),
                ),
                (
                    "description",
                    models.TextField(blank=True, help_text="Description of the resource"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "is_featured",
                    models.BooleanField(
                        default=False,
                        help_text="Featured resources appear prominently in the UI",
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional metadata specific to the resource",
                        null=True,
                    ),
                ),
                ("author", models.CharField(max_length=255)),
                (
                    "url",
                    models.URLField(
                        help_text="URL of the article",
                        validators=[django.core.validators.URLValidator()],
                    ),
                ),
                ("publication_date", models.DateField()),
                (
                    "source",
                    models.CharField(help_text="Source/publisher of the article", max_length=255),
                ),
                (
                    "is_peer_reviewed",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if the article is peer-reviewed",
                    ),
                ),
                (
                    "reading_time",
                    models.PositiveIntegerField(
                        help_text="Estimated reading time in minutes",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(120),
                        ],
                    ),
                ),
                (
                    "topic_ext",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s",
                        to="course_ware_ext.topicext",
                    ),
                ),
            ],
            options={
                "verbose_name": "Article Resource",
                "verbose_name_plural": "Article Resources",
            },
        ),
        migrations.CreateModel(
            name="VideoResource",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(help_text="Title of the resource", max_length=255),
                ),
                (
                    "description",
                    models.TextField(blank=True, help_text="Description of the resource"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "is_featured",
                    models.BooleanField(
                        default=False,
                        help_text="Featured resources appear prominently in the UI",
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional metadata specific to the resource",
                        null=True,
                    ),
                ),
                (
                    "url",
                    models.URLField(
                        help_text="URL of the video",
                        validators=[django.core.validators.URLValidator()],
                    ),
                ),
                (
                    "duration",
                    models.PositiveIntegerField(
                        help_text="Duration of the video in minutes",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(480),
                        ],
                    ),
                ),
                (
                    "platform",
                    models.CharField(
                        choices=[
                            ("youtube", "YouTube"),
                            ("vimeo", "Vimeo"),
                            ("other", "Other"),
                        ],
                        default="youtube",
                        max_length=50,
                    ),
                ),
                (
                    "requires_subscription",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if the video requires a platform subscription",
                    ),
                ),
                (
                    "transcript_available",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if a transcript is available",
                    ),
                ),
                (
                    "topic_ext",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s",
                        to="course_ware_ext.topicext",
                    ),
                ),
            ],
            options={
                "verbose_name": "Video Resource",
                "verbose_name_plural": "Video Resources",
            },
        ),
        migrations.CreateModel(
            name="UserCategoryMastery",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "points_earned",
                    models.PositiveIntegerField(default=0, help_text="Total points earned in this category"),
                ),
                (
                    "bonus_points_earned",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Bonus points earned through exceptional performance",
                    ),
                ),
                (
                    "mastery_achievements",
                    models.JSONField(
                        default=list,
                        help_text="List of specific achievements earned in this category",
                    ),
                ),
                ("started_at", models.DateTimeField(auto_now_add=True)),
                ("last_activity", models.DateTimeField(auto_now=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "mastery_status",
                    models.CharField(
                        choices=[
                            ("not_started", "Not Started"),
                            ("in_progress", "In Progress"),
                            ("mastered", "Mastered"),
                            ("advanced_mastery", "Advanced Mastery"),
                        ],
                        default="not_started",
                        max_length=20,
                    ),
                ),
                (
                    "attempts_count",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of question attempts in this category",
                    ),
                ),
                (
                    "correct_answers",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of correct answers in this category",
                    ),
                ),
                (
                    "streak_count",
                    models.PositiveIntegerField(default=0, help_text="Current streak of correct answers"),
                ),
                (
                    "best_streak",
                    models.PositiveIntegerField(default=0, help_text="Best streak of correct answers"),
                ),
                (
                    "category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_masteries",
                        to="course_ware.category",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="category_masteries",
                        to="course_ware.user",
                    ),
                ),
            ],
            options={
                "verbose_name": "User Category Mastery",
                "verbose_name_plural": "User Category Masteries",
                "unique_together": {("user", "category")},
            },
        ),
    ]
