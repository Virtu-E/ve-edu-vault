"""
Django settings for edu_vault project.

Generated by 'django-admin startproject' using Django 5.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from datetime import timedelta
from pathlib import Path

from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
MONGO_URL = config("MONGO_URL")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-$%pf&(zm7psez39!gruk&7^_ao%@&6xhwtsg7=_bctml77s4gw"
DEBUG = config("DEBUG", default=False, cast=bool)

EDX_AUTH_MODEL = "users.EdxUser"


DJANGO_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

EXTERNAL_APPS = [
    "pylti1p3.contrib.django.lti1p3_tool_config",
    "rest_framework",
    "corsheaders",
    "django_json_widget",
    "django_elasticsearch_dsl",
    "django_extensions",
    "oauth2_provider",
    "knox",
    "adrf",
    # "silk",
]

CORE_APPS = [
    "src.apps.core.content",
    "src.apps.content_ext",
    "src.apps.core.courses",
    "src.apps.core.users",
]

INTEGRATION_APPS = [
    "src.apps.integrations.lti_provider",
    "src.apps.integrations.oauth_clients",
    "src.apps.integrations.webhooks",
]

LEARNING_TOOLS_APPS = [
    "src.apps.learning_tools.assessments",
    "src.apps.learning_tools.questions",
]

INSTALLED_APPS = [
    *DJANGO_APPS,
    *EXTERNAL_APPS,
    *CORE_APPS,
    *INTEGRATION_APPS,
    *LEARNING_TOOLS_APPS,
]


# TODO : csrf protection vs authentication
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "knox.auth.TokenAuthentication",
        "oauth2_provider.contrib.rest_framework.OAuth2Authentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
}

# TODO : need to sync the token expiry time with edx token expiry time
REST_KNOX = {
    "TOKEN_TTL": timedelta(hours=8),
    "AUTO_REFRESH": True,
    "AUTO_REFRESH_MAX_TTL": timedelta(days=30),
    "MIN_REFRESH_INTERVAL": 300,
    "TOKEN_LIMIT_PER_USER": 10,
}

OAUTH2_PROVIDER = {
    "SCOPES": {
        "read": "Read scope",
        "write": "Write scope",
        "edx_login": "EDX Login scope",
    },
    "ACCESS_TOKEN_EXPIRE_SECONDS": 3600,
    "REFRESH_TOKEN_EXPIRE_SECONDS": 86400,
}

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]


ROOT_URLCONF = "src.config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

STATICFILES_DIRS = [BASE_DIR / "static"]

WSGI_APPLICATION = "src.config.wsgi.application"

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# TODO : set more app specific logging
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
        "detailed": {
            "format": (
                "%(asctime)s [%(levelname)s] %(name)s (%(filename)s:%(lineno)d) %(message)s"
            )
        },
        "simple": {"format": "%(asctime)s::%(name)s::%(levelname)s::%(message)s"},
    },
    "handlers": {
        "console": {
            "level": "DEBUG" if DEBUG else "INFO",
            "class": "logging.StreamHandler",
            "formatter": "detailed",
        },
        "file": {
            "level": "DEBUG" if DEBUG else "INFO",
            "class": "logging.FileHandler",
            "filename": "virtu_educate.log",
            "formatter": "verbose",
        },
    },
    "loggers": {
        "": {
            "handlers": ["file", "console"],
            "level": "DEBUG" if DEBUG else "INFO",
            "propagate": True,
        },
        "django.request": {
            "handlers": ["console"],  # or ["file", "console"] if you want both
            "level": "DEBUG" if DEBUG else "INFO",
            "propagate": True,
        },
    },
}

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

SITE_URL = config("SITE_URL")

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# TODO : thinking of using getattr when accessing this. Food for thought
NO_SQL_DATABASE_NAME = config("NO_SQL_DATABASE_NAME")
NO_SQL_QUESTIONS_DATABASE_NAME = config("NO_SQL_QUESTIONS_DATABASE_NAME")
NO_SQL_ATTEMPTS_DATABASE = config("NO_SQL_ATTEMPTS_DATABASE")
NO_SQL_GRADING_RESPONSE_DATABASE_NAME = config("NO_SQL_GRADING_RESPONSE_DATABASE_NAME")
MINIMUM_QUESTIONS_THRESHOLD = 9
COMPLETION_THRESHOLD = 2 / 3

ENCRYPTION_KEY = config("ENCRYPTION_KEY")
LTI_LAUNCH_URL = config("LTI_LAUNCH_URL")
LEARNING_HISTORY_COLLECTION_NAME = "learning_history"


# CELERY SETTINGS
CELERY_BROKER_URL = config("CELERY_BROKER_URL")
CELERY_RESULT_BACKEND = config("CELERY_BROKER_URL")

# Redis configuration

CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_TIMEZONE = "UTC"

# Track started tasks in addition to pending
CELERY_TASK_TRACK_STARTED = True

# Store task results for 7 days
CELERY_RESULT_EXPIRES = 60 * 60 * 24 * 7

CELERY_BROKER_POOL_LIMIT = 10  # Or more if needed
CELERY_BROKER_CONNECTION_TIMEOUT = 5

# QSTASH CONFIGURATION
QSTASH_URL = config("QSTASH_URL")
QSTASH_TOKEN = config("QSTASH_TOKEN")
QSTASH_CURRENT_SIGNING_KEY = config("QSTASH_CURRENT_SIGNING_KEY")
QSTASH_NEXT_SIGNING_KEY = config("QSTASH_NEXT_SIGNING_KEY")

FRONT_END_URL = config("FRONT_END_URL")

# 'use_ssl': True,
# 'verify_certs': True,

from src.config.settings.elastic_search import *  # noqa
