"""
Django settings for edu_vault project.

Generated by 'django-admin startproject' using Django 5.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from datetime import timedelta
from pathlib import Path

from decouple import config
from django.core.exceptions import ImproperlyConfigured

# =============================================================================
# CORE SETTINGS
# =============================================================================

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# SECURITY WARNING: keep the secret key used in production secret!
DEBUG = config("DEBUG", default=False, cast=bool)
SECRET_KEY = config("SECRET_KEY", default="dev-key-only-for-local")

if not SECRET_KEY or SECRET_KEY == "dev-key-only-for-local":
    if not DEBUG:
        raise ImproperlyConfigured("SECRET_KEY must be set in production")

# Site Configuration
SITE_URL = config("SITE_URL")
FRONT_END_URL = config("FRONT_END_URL")

# =============================================================================
# APPLICATION DEFINITION
# =============================================================================

DJANGO_APPS = [
    "django_admin_env_notice",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

EXTERNAL_APPS = [
    "pylti1p3.contrib.django.lti1p3_tool_config",
    "rest_framework",
    "django_filters",
    "corsheaders",
    "django_json_widget",
    "django_extensions",
    "oauth2_provider",
    "knox",
    "adrf",
    # "silk",
]

CORE_APPS = [
    "src.apps.core.content",
    "src.apps.content_ext",
    "src.apps.core.courses",
    "src.apps.core.users",
    "src.apps.core.search",
    "src.apps.core.notifications",
]

INTEGRATION_APPS = [
    "src.apps.integrations.lti_provider",
    "src.apps.integrations.oauth_clients",
    "src.apps.integrations.webhooks",
]

LEARNING_TOOLS_APPS = [
    "src.apps.learning_tools.assessments",
    "src.apps.learning_tools.questions",
    "src.apps.learning_tools.time_table",
]

INSTALLED_APPS = [
    *DJANGO_APPS,
    *EXTERNAL_APPS,
    *CORE_APPS,
    *INTEGRATION_APPS,
    *LEARNING_TOOLS_APPS,
]

# =============================================================================
# MIDDLEWARE
# =============================================================================

MIDDLEWARE = [
    "csp.middleware.CSPMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

# =============================================================================
# URL & TEMPLATE CONFIGURATION
# =============================================================================

ROOT_URLCONF = "src.config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "django_admin_env_notice.context_processors.from_settings",
            ],
        },
    },
]

# =============================================================================
# AUTHENTICATION & AUTHORIZATION
# =============================================================================

# Custom User Model
EDX_AUTH_MODEL = "users.EdxUser"

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# =============================================================================
# REST FRAMEWORK & API CONFIGURATION
# =============================================================================

# TODO: csrf protection vs authentication
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "knox.auth.TokenAuthentication",
        "oauth2_provider.contrib.rest_framework.OAuth2Authentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
    "DEFAULT_THROTTLE_RATES": {"anon": "100/hour", "user": "1000/hour"},
}

# Knox Token Authentication
# TODO: need to sync the token expiry time with edx token expiry time
REST_KNOX = {
    "TOKEN_TTL": timedelta(hours=8),
    "AUTO_REFRESH": True,
    "AUTO_REFRESH_MAX_TTL": timedelta(days=30),
    "MIN_REFRESH_INTERVAL": 300,
    "TOKEN_LIMIT_PER_USER": 4,
}

# OAuth2 Provider
OAUTH2_PROVIDER = {
    "SCOPES": {
        "read": "Read scope",
        "write": "Write scope",
        "edx_login": "EDX Login scope",
    },
    "ACCESS_TOKEN_EXPIRE_SECONDS": 3600,
    "REFRESH_TOKEN_EXPIRE_SECONDS": 86400,
}

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================

# MongoDB Configuration
MONGO_URL = config("MONGO_URL")
NO_SQL_DATABASE_NAME = config("NO_SQL_DATABASE_NAME")
NO_SQL_QUESTIONS_DATABASE_NAME = config("NO_SQL_QUESTIONS_DATABASE_NAME")
NO_SQL_ATTEMPTS_DATABASE = config("NO_SQL_ATTEMPTS_DATABASE")
NO_SQL_GRADING_RESPONSE_DATABASE_NAME = config("NO_SQL_GRADING_RESPONSE_DATABASE_NAME")


# =============================================================================
# INTERNATIONALIZATION
# =============================================================================

LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True

# =============================================================================
# LOGGING CONFIGURATION
# =============================================================================

# TODO: set more app specific logging
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
        "detailed": {
            "format": (
                "%(asctime)s [%(levelname)s] %(name)s (%(filename)s:%(lineno)d) %(message)s"
            )
        },
        "simple": {"format": "%(asctime)s::%(name)s::%(levelname)s::%(message)s"},
    },
    "handlers": {
        "console": {
            "level": "DEBUG" if DEBUG else "INFO",
            "class": "logging.StreamHandler",
            "formatter": "detailed",
        },
        "file": {
            "level": "DEBUG" if DEBUG else "INFO",
            "class": "logging.FileHandler",
            "filename": "virtu_educate.log",
            "formatter": "verbose",
        },
    },
    "loggers": {
        "": {
            "handlers": ["file", "console"],
            "level": "DEBUG" if DEBUG else "INFO",
            "propagate": True,
        },
        "django.request": {
            "handlers": ["console"],  # or ["file", "console"] if you want both
            "level": "DEBUG" if DEBUG else "INFO",
            "propagate": True,
        },
    },
}

# =============================================================================
# CELERY CONFIGURATION
# =============================================================================

CELERY_BROKER_URL = config("CELERY_BROKER_URL")
CELERY_RESULT_BACKEND = config("CELERY_BROKER_URL")

# Celery Task Configuration
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_TIMEZONE = "UTC"

# Track started tasks in addition to pending
CELERY_TASK_TRACK_STARTED = True

# Store task results for 7 days
CELERY_RESULT_EXPIRES = 60 * 60 * 24 * 7

# Connection Configuration
CELERY_BROKER_POOL_LIMIT = 10  # Or more if needed
CELERY_BROKER_CONNECTION_TIMEOUT = 5

# =============================================================================
# THIRD-PARTY SERVICE CONFIGURATION
# =============================================================================

# QStash Configuration
QSTASH_URL = config("QSTASH_URL")
QSTASH_TOKEN = config("QSTASH_TOKEN")
QSTASH_CURRENT_SIGNING_KEY = config("QSTASH_CURRENT_SIGNING_KEY")
QSTASH_NEXT_SIGNING_KEY = config("QSTASH_NEXT_SIGNING_KEY")

# LTI Configuration
LTI_LAUNCH_URL = config("LTI_LAUNCH_URL")

# Encryption
ENCRYPTION_KEY = config("ENCRYPTION_KEY")

# =============================================================================
# APPLICATION-SPECIFIC SETTINGS
# =============================================================================

# Learning Configuration
MINIMUM_QUESTIONS_THRESHOLD = 9
COMPLETION_THRESHOLD = 2 / 3
LEARNING_HISTORY_COLLECTION_NAME = "learning_history"

# =============================================================================
# DJANGO DEFAULTS
# =============================================================================

WSGI_APPLICATION = "src.config.wsgi.application"
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


ENABLE_SCHEDULING = config("ENABLE_SCHEDULING", cast=bool, default=False)


# =============================================================================
# CACHING
# =============================================================================


# Cache timeout for notifications (1 hour)
NOTIFICATION_CACHE_TIMEOUT = 60 * 60  # 3600 seconds
