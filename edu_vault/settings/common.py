"""
Django settings for edu_vault project.

Generated by 'django-admin startproject' using Django 5.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import ssl
from pathlib import Path

from decouple import config
from redis import ConnectionPool, Redis

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
MONGO_URL = "mongodb+srv://myAtlasDBUser:tkB0QqcKTztNhnWW@myatlasclusteredu.2khcb.mongodb.net/?retryWrites=true&w=majority&appName=myAtlasClusterEDU"

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-$%pf&(zm7psez39!gruk&7^_ao%@&6xhwtsg7=_bctml77s4gw"
DEBUG = config("DEBUG", default=False, cast=bool)

# Disable SSL verification globally for all requests


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "lti_provider",
    "pylti1p3.contrib.django.lti1p3_tool_config",
    "ai_core",
    "course_ware",
    "rest_framework",
    "corsheaders",
    "course_ware_ext",
    "django_json_widget",
    "webhooks",
    # "oauth2_provider",
    "oauth_clients",
    "django_elasticsearch_dsl",
    "course_sync",
    "django_extensions",
    # "silk",
]


# TODO : csrf protection vs authentication
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.BasicAuthentication",
        "rest_framework.authentication.TokenAuthentication",
    ],
}

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "corsheaders.middleware.CorsMiddleware",
]


ROOT_URLCONF = "edu_vault.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

STATICFILES_DIRS = [BASE_DIR / "static"]

WSGI_APPLICATION = "edu_vault.wsgi.application"

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# TODO : set more app specific logging
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
        "detailed": {
            "format": (
                "%(asctime)s [%(levelname)s] %(name)s (%(filename)s:%(lineno)d) %(message)s"
            )
        },
        "simple": {"format": "%(asctime)s::%(name)s::%(levelname)s::%(message)s"},
    },
    "handlers": {
        "console": {
            "level": "DEBUG" if DEBUG else "INFO",
            "class": "logging.StreamHandler",
            "formatter": "detailed",
        },
        "file": {
            "level": "DEBUG" if DEBUG else "INFO",
            "class": "logging.FileHandler",
            "filename": "virtu_educate.log",
            "formatter": "verbose",
        },
    },
    "loggers": {
        "": {
            "handlers": ["file", "console"],
            "level": "DEBUG" if DEBUG else "INFO",
            "propagate": True,
        },
        "django.request": {
            "handlers": ["console"],  # or ["file", "console"] if you want both
            "level": "DEBUG" if DEBUG else "INFO",
            "propagate": True,
        },
    },
}

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# TODO : thinking of using getattr when accessing this. Food for thought
NO_SQL_DATABASE_NAME = config("NO_SQL_DATABASE_NAME")
MINIMUM_QUESTIONS_THRESHOLD = 9
COMPLETION_THRESHOLD = 2 / 3

ENCRYPTION_KEY = "gk79FsqK0sTh03Xo6MFkQW6g44-bk4cXj3gFvmpk8kA="
LTI_LAUNCH_URL = "https://vault.virtueducate.edly.io/lti/launch/"
LEARNING_HISTORY_COLLECTION_NAME = "learning_history"


# CELERY SETTINGS
CELERY_BROKER_URL = "rediss://default:AVNS_yIn8MR4Pkm7b5groMJN@virtu-educate-18cd5531-virtu-educate-1.j.aivencloud.com:14435?ssl_cert_reqs=CERT_NONE"
CELERY_RESULT_BACKEND = CELERY_BROKER_URL

# Redis configuration
REDIS_URL = "rediss://default:AVNS_yIn8MR4Pkm7b5groMJN@virtu-educate-18cd5531-virtu-educate-1.j.aivencloud.com:14435"
REDIS_CONNECTION_POOL = ConnectionPool.from_url(REDIS_URL, ssl_cert_reqs=ssl.CERT_NONE)
REDIS_CLIENT = Redis(connection_pool=REDIS_CONNECTION_POOL)

CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_TIMEZONE = "UTC"

# Track started tasks in addition to pending
CELERY_TASK_TRACK_STARTED = True

# Store task results for 7 days
CELERY_RESULT_EXPIRES = 60 * 60 * 24 * 7

CELERY_BROKER_POOL_LIMIT = 10  # Or more if needed
CELERY_BROKER_CONNECTION_TIMEOUT = 5


# 'use_ssl': True,
# 'verify_certs': True,

ELASTICSEARCH_DSL = {
    "default": {
        "hosts": ["https://164.92.156.155:9200"],
        "http_auth": ("elastic", "it4JT8-GUXHLo2gC8AFe"),
        "timeout": 30,
        "retry_on_timeout": True,
        "verify_certs": False,  # In production, you should use proper certificates
    },
}
# ELASTICSEARCH_DSL_AUTOSYNC = False
# ELASTICSEARCH_DSL_AUTO_REFRESH = False
ELASTICSEARCH_DSL_SIGNAL_PROCESSOR = (
    "elastic_search.custom_signal_processor.CustomCelerySignalProcessor"
)
